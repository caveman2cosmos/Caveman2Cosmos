# DynamicCivNames
#
# by jdog5000
# Version 1.0
#
# French compatibility from calvitix
#

from CvPythonExtensions import *
from CvEventInterface import getEventManager
import TextUtil
# --------- Revolution mod -------------
import SdToolKit as SDTK
import RevUtils

GC = CyGlobalContext()
GAME = GC.getGame()
TRNSLTR = CyTranslator()

bEnabled = False


def init():
	global bEnabled, femaleLeaders
	if bEnabled: return

	EM = getEventManager()
	EM.addEventHandler("BeginPlayerTurn", onBeginPlayerTurn)
	EM.addEventHandler("setPlayerAlive", onSetPlayerAlive)
	EM.addEventHandler("cityAcquiredAndKept", onCityAcquiredAndKept)
	EM.addEventHandler("cityBuilt", onCityBuilt)
	EM.addEventHandler("vassalState", onVassalState)
	EM.addEventHandler("addTeam", onAddTeam)

	femaleLeaders = (
		GC.getInfoTypeForString("LEADER_BOUDICA"),
		GC.getInfoTypeForString("LEADER_CATHERINE"),
		GC.getInfoTypeForString("LEADER_ELIZABETH"),
		GC.getInfoTypeForString("LEADER_HATSHEPSUT"),
		GC.getInfoTypeForString("LEADER_ISABELLA"),
		GC.getInfoTypeForString("LEADER_VICTORIA"),
		GC.getInfoTypeForString("LEADER_MARGRETE"),
		GC.getInfoTypeForString("LEADER_SALAMASINA"),
		GC.getInfoTypeForString("LEADER_ATOTOZTLI"),
		GC.getInfoTypeForString("LEADER_CLEOPATRA"),
		GC.getInfoTypeForString("LEADER_DIDO"),
		GC.getInfoTypeForString("LEADER_JOANOFARC"),
		GC.getInfoTypeForString("LEADER_NEFERTITI"),
		GC.getInfoTypeForString("LEADER_THEODORA"),
		GC.getInfoTypeForString("LEADER_WILHELMINA"),
		GC.getInfoTypeForString("LEADER_WU")
	)

	#bTeamNaming = REV_OPTIONS.isTeamNaming()
	#bLeaveHumanName = REV_OPTIONS.isLeaveHumanPlayerName()

	if not GAME.isFinalInitialized or GAME.getGameTurn() == GAME.getStartTurn():
		for i in xrange(GC.getMAX_PC_PLAYERS()):
			onSetPlayerAlive([i, GC.getPlayer(i).isAlive()])

	bEnabled = True


def uninit():
	global bEnabled
	if not bEnabled: return

	EM = getEventManager()
	EM.removeEventHandler("BeginPlayerTurn", onBeginPlayerTurn)
	EM.removeEventHandler("setPlayerAlive", onSetPlayerAlive)
	EM.removeEventHandler("cityAcquiredAndKept", onCityAcquiredAndKept)
	EM.removeEventHandler("cityBuilt", onCityBuilt)
	EM.removeEventHandler("vassalState", onVassalState)
	EM.removeEventHandler("addTeam", onAddTeam)

	for i in range(GC.getMAX_PC_PLAYERS()):
		if GC.getPlayer(i).isAlive():
			resetName(i)

	bEnabled = False


def blankHandler(playerID, netUserData, popupReturn):
	""" Dummy handler to take the second event for popup """
	return


def onBeginPlayerTurn(argsList):
	#iGameTurn = argsList[0]
	iPlayer = argsList[1]

	# Stuff at end of previous players turn
	iPrevPlayer = iPlayer - 1
	while iPrevPlayer >= 0 and not GC.getPlayer(iPrevPlayer).isAlive():
		iPrevPlayer -= 1

	if iPrevPlayer < 0:
		iPrevPlayer = GC.getBARBARIAN_PLAYER()

	if iPrevPlayer >= 0 and iPrevPlayer < GC.getMAX_PC_PLAYERS():
		iPlayer = iPrevPlayer
		pPlayer = GC.getPlayer(iPlayer)

		# Possibly a really bad performance hit...
		if pPlayer.isAlive() and not pPlayer.isNPC():
			setNewNameByCivics(iPlayer)
			return

		if pPlayer.isAnarchy():
			setNewNameByCivics(iPlayer)
			return

		if pPlayer.isAlive() and SDTK.sdObjectExists("Revolution", pPlayer):
			prevCivics = SDTK.sdObjectGetVal("Revolution", pPlayer, 'CivicList')
			if not prevCivics == None:
				for i in xrange(GC.getNumCivicOptionInfos()):
					if not prevCivics[i] == pPlayer.getCivics(i):
						setNewNameByCivics(iPlayer)
						return

			revTurn = SDTK.sdObjectGetVal("Revolution", pPlayer, 'RevolutionTurn')
			if revTurn is not None and GAME.getGameTurn() - revTurn == 30 and pPlayer.getNumCities() > 0:
				# "Graduate" from rebel name
				setNewNameByCivics(iPlayer)
				return

		if pPlayer.isAlive() and SDTK.sdObjectExists("BarbarianCiv", pPlayer):
			barbTurn = SDTK.sdObjectGetVal("BarbarianCiv", pPlayer, 'SpawnTurn')
			if barbTurn is not None and GAME.getGameTurn() - barbTurn == 30:
				# "Graduate" from barb civ name
				setNewNameByCivics(iPlayer)
				return

		if (pPlayer.isAlive()
		and not SDTK.sdObjectExists("BarbarianCiv", pPlayer)
		and 'Tribe' in pPlayer.getCivilizationDescription(0)
		and (pPlayer.getCurrentEra() > 0 or pPlayer.getTotalPopulation() >= 3)
		):
			# Graduate from game start name
			setNewNameByCivics(iPlayer)
			return


def onCityAcquiredAndKept(argsList):
	#iOwnerOld, iOwnerNew, city, bConquest, bTrade = argsList
	iPlayer = argsList[1]
	owner = GC.getPlayer(iPlayer)
	if owner.isAlive() and not owner.isNPC() and owner.getNumCities() < 5 and owner.getNumMilitaryUnits() > 0:
		setNewNameByCivics(iPlayer)


def onCityBuilt(argsList):
	owner = GC.getPlayer(argsList[0].getOwner())
	if owner.isAlive() and not owner.isNPC() and owner.getNumCities() < 5 and owner.getNumMilitaryUnits() > 0:
		# Causes the 'tribe' name to be erased immediately upon founding the first city.
		setNewNameByCivics(owner.getID())


def onVassalState(argsList):
	iVassal = argsList[1]
	for iPlayer in xrange(GC.getMAX_PC_PLAYERS()):
		if GC.getPlayer(iPlayer).getTeam() == iVassal:
			setNewNameByCivics(iPlayer)


def setNewNameByCivics(iPlayer):
	#if bLeaveHumanName and (GC.getPlayer(iPlayer).isHuman() or GAME.getActivePlayer() == iPlayer):
	#	return
	[newCivDesc, newCivShort, newCivAdj] = newNameByCivics(iPlayer)

	if not newCivDesc == GC.getPlayer(iPlayer).getCivilizationDescription(0):
		szMessage = TRNSLTR.getText("TXT_KEY_MOD_DCN_NEWCIV_NAME_DESC", (newCivDesc,))
		CyInterface().addMessage(iPlayer, False, GC.getEVENT_MESSAGE_TIME(), szMessage, None, InterfaceMessageTypes.MESSAGE_TYPE_INFO, None, GC.getInfoTypeForString("COLOR_HIGHLIGHT_TEXT"), -1, -1, False, False)

	GC.getPlayer(iPlayer).setCivName(newCivDesc, newCivShort, newCivAdj)


def onSetPlayerAlive(argsList):
	iPlayerID = argsList[0]
	bNewValue = argsList[1]
	if bNewValue and iPlayerID < GC.getMAX_PC_PLAYERS():
		pPlayer = GC.getPlayer(iPlayerID)
		#if bLeaveHumanName and (pPlayer.isHuman() or GAME.getActivePlayer() == iPlayerID):
		#	return
		[newCivDesc, newCivShort, newCivAdj] = nameForNewPlayer(iPlayerID)

		# Pass to pPlayer seems to require a conversion to 'ascii'
		pPlayer.setCivName(newCivDesc, newCivShort, newCivAdj)


def onAddTeam(argsList):
	eTeam1 = argsList[0]
	eTeam2 = argsList[1]
	for i in xrange(GC.getMAX_PC_PLAYERS()):
		pPlayer = GC.getPlayer(i)
		if pPlayer.isAlive() and pPlayer.getTeam() in (eTeam1, eTeam2):
			setNewNameByCivics(i)


def nameForNewPlayer(iPlayer):
	# Assigns a new name to a recently created player from either
	# BarbarianCiv or Revolution components
	pPlayer = GC.getPlayer(iPlayer)
	shortName = pPlayer.getCivilizationShortDescription(0)
	currentName = pPlayer.getCivilizationDescription(0)
	adjective = pPlayer.getCivilizationAdjective(0)

	if not pPlayer.isAlive():
		return [TRNSLTR.getText("TXT_KEY_MOD_DCN_REFUGEES", ())%(adjective), shortName, adjective]

	currentEra = 0
	for i in xrange(GC.getMAX_PC_PLAYERS()):
		if GC.getPlayer(i).getCurrentEra() > currentEra:
			currentEra = GC.getPlayer(i).getCurrentEra()

	if pPlayer.isRebel():
		# To name rebels in Revolution mod
		sLiberation = TRNSLTR.getText("TXT_KEY_MOD_DCN_LIBERATION_FRONT", ()).replace('%s','').strip()
		sGuerillas = TRNSLTR.getText("TXT_KEY_MOD_DCN_GUERILLAS", ()).replace('%s','').strip()
		sRebels = TRNSLTR.getText("TXT_KEY_MOD_DCN_REBELS", ()).replace('%s','').strip()

		if sLiberation in currentName or sGuerillas in currentName or sRebels in currentName:
			newName = currentName

		elif currentEra > 5 and 30 > GAME.getSorenRandNum(100,'Rev: Naming'):
			newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_LIBERATION_FRONT", ())%(adjective)

		elif currentEra > 4 and 30 > GAME.getSorenRandNum(100,'Rev: Naming'):
			newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_GUERILLAS", ())%(adjective)
		else:
			capitalName = SDTK.sdObjectGetVal("Revolution", pPlayer, 'CapitalName')

			if capitalName is not None and len(capitalName) < 10:
				try:
					if capitalName in adjective or capitalName in shortName:
						newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_THE_REBELS_OF", ())%(TextUtil.convertToStr(capitalName))
					else:
						newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_REBELS_OF", ())%(adjective,TextUtil.convertToStr(capitalName))
				except:
					newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_REBELS", ())%(adjective)
			else:
				newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_REBELS", ())%(adjective)

		return [newName, shortName, adjective]

	if SDTK.sdObjectExists("BarbarianCiv", pPlayer):
		barbTurn = SDTK.sdObjectGetVal("BarbarianCiv", pPlayer, 'SpawnTurn')
	else: barbTurn = None

	if barbTurn is not None and GAME.getGameTurn() - barbTurn < 20:
		# To name BarbarianCiv created civs
		numCities = SDTK.sdObjectGetVal("BarbarianCiv", pPlayer, 'NumCities')
		capitalName = SDTK.sdObjectGetVal("BarbarianCiv", pPlayer, 'CapitalName')

		if pPlayer.isMinorCiv():
			if currentEra > 2:
				newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_NATION", ())%(adjective)

			elif currentEra == 2:
				newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_CITY_STATE", ())%(adjective)

			elif 70 - 40*currentEra > GAME.getSorenRandNum(100,"Naming"):
				newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_TRIBE", ())%(adjective)
			else:
				newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_CITY_STATE", ())%(adjective)

		elif currentEra < 4:
			# Early era barbs
			if SDTK.sdObjectGetVal('BarbarianCiv', pPlayer, 'BarbStyle') != 'Military':
				if numCities == 1:
					newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_CITY_STATE", ())%(adjective)
				else:
					newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_EMPIRE", ())%(adjective)

				if numCities < 3 and capitalName is not None and len(capitalName) < 10:
					newName += TRNSLTR.getText("TXT_KEY_MOD_DCN_OF_CITY", ())%(capitalName)

			elif pPlayer.getNumMilitaryUnits() > 7*numCities:
				newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_HORDE", ())%(adjective)

			elif capitalName is None or len(capitalName) > 9:
				newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_WARRIOR_STATE", ())%(adjective)

			elif capitalName in adjective or capitalName in shortName:
				newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_THE_WARRIORS_OF", ())%(capitalName)
			else:
				newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_WARRIORS_OF", ())%(adjective,capitalName)

		else:
			newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_EMPIRE", ())%(adjective)
			if numCities < 3 and capitalName is not None and len(capitalName) < 10:
				newName += TRNSLTR.getText("TXT_KEY_MOD_DCN_OF_CITY", ())%(capitalName)

		return [newName, shortName, adjective]

	return newNameByCivics(iPlayer)


def getNames(pPlayer):
	"""Get the short name and the adjective of the civilisation."""
	civInfo = GC.getCivilizationInfo(pPlayer.getCivilizationType())
	shortName = civInfo.getShortDescription(0)	# Default
	adjective = civInfo.getAdjective(0)	# Default

	# Short name from capital if civ has only one city.
	if pPlayer.getNumCities() == 1:
		shortName = getCapitalName(pPlayer)

	return [shortName, adjective]


def getNewNameAmerica(eRuleCivic, adjective):
	"""American-specific names."""
	if GC.getInfoTypeForString("CIVIC_FEDERALISM") == eRuleCivic:
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_UNITED_STATES_OF_AMERICA", ())
		newShortName = TRNSLTR.getText("TXT_KEY_MOD_DCN_SHORTNAME_USA", ())
		return [newName, newShortName, adjective]
	
	if GC.getInfoTypeForString("CIVIC_CONFEDERACY") == eRuleCivic:
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_CONFEDERATE_STATES_OF_AMERICA", ())
		newShortName = TRNSLTR.getText("TXT_KEY_MOD_DCN_SHORTNAME_CSA", ())
		return [newName, newShortName, adjective]
	
	return None


def getNewNameGreece(pPlayer, eRuleCivic, shortName, adjective):
	"""Greek-specific names."""
	if GC.getInfoTypeForString("CIVIC_CITY_STATES") == eRuleCivic:
		if pPlayer.getNumCities() == 1:
			newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_POLIS", ()) % shortName
		else:
			newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_HELLENIC_LEAGUE", ())
		return [newName, shortName, adjective]
	
	return None


def getNewNameRussia(pPlayer, eSocietyCivic, eGovernmentCivic):
	"""Russian-specific names."""
	if isSocialist(pPlayer, eSocietyCivic, eGovernmentCivic):
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_SOVIET_UNION", ())
		newShortName = TRNSLTR.getText("TXT_KEY_MOD_DCN_SHORTNAME_USSR", ())
		newAdjective = TRNSLTR.getText("TXT_KEY_MOD_DCN_ADJECTIVE_SOVIET", ())
		return [newName, newShortName, newAdjective]
	
	return None


def getNewNameCivSpecific(pPlayer, eGovernmentCivic, eRuleCivic, eSocietyCivic, shortName, adjective):
	"""Names which are specific to certain civs."""
	if pPlayer.getCivilizationType() == GC.getInfoTypeForString("CIVILIZATION_AMERICA"):
		return getNewNameAmerica(eRuleCivic, adjective)
	
	if pPlayer.getCivilizationType() == GC.getInfoTypeForString("CIVILIZATION_GREECE"):
		return getNewNameGreece(pPlayer, eRuleCivic, shortName, adjective)
	
	if pPlayer.getCivilizationType() == GC.getInfoTypeForString("CIVILIZATION_RUSSIA"):
		return getNewNameRussia(pPlayer, eSocietyCivic, eGovernmentCivic)
	
	return None
	

def newNameByCivics(iPlayer):
	# Assigns a new name to a player based on their civics choices
	pPlayer = GC.getPlayer(iPlayer)
	pTeam = GC.getTeam(pPlayer.getTeam())

	currentName	= pPlayer.getCivilizationDescription(0)
	[shortName, adjective] = getNames(pPlayer)

	origDesc = ""
	if pPlayer.getCivilizationType() >= 0:
		civInfo = GC.getCivilizationInfo(pPlayer.getCivilizationType())
		origDesc = civInfo.getDescription()

	eGovernmentCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_GOVERNMENT"))
	eRuleCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_RULE"))
	ePowerCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_POWER"))
	# eMilitaryCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_MILITARY"))
	# eReligionCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_RELIGION"))
	eSocietyCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_SOCIETY"))
	# eEconomyCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_ECONOMY"))
	# eWelfareCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_WELFARE"))
	# eCurrencyCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_CURRENCY"))
	# eWorkforceCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_WORKFORCE"))
	# eEducationCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_EDUCATION"))
	# eLanguageCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_LANGUAGE"))
	# eImmigrationCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_IMMIGRATION"))
	# eAgricultureCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_AGRICULTURE"))
	# eGarbageCivic = pPlayer.getCivics(GC.getInfoTypeForString("CIVICOPTION_GARBAGE"))

	newName = getNewNameSpecial(pPlayer, currentName, adjective)
	if newName is not None:
		return [newName, shortName, adjective]
	
	newName = getNewNameAlliance(pTeam)
	if newName is not None:
		return [newName, shortName, adjective]
	
	newName = getNewNameAnarchy(pPlayer, iPlayer, adjective)
	if newName is not None:
		return [newName, shortName, adjective]
	
	newName = getNewNameCivSpecific(pPlayer, eGovernmentCivic, eRuleCivic, eSocietyCivic, shortName, adjective)
	if newName is not None:
		return newName	# Includes full name, short name and adjective.
	
	newName = getNewNameGeneric(pPlayer, shortName, adjective, eGovernmentCivic, ePowerCivic, eSocietyCivic)
	if newName is not None:
		return [newName, shortName, adjective]

	# A generic default name if nothing else is applicable.
	newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_NATION", ()) % adjective
	return [newName, shortName, adjective]


def getCapitalName(pPlayer):
	"""Get the name of the civ capital for naming purposes."""
	capital = pPlayer.getCapitalCity()
	cityString = None
	if capital:
		try:
			# Silly game to force ascii encoding now
			cityString = pPlayer.getCivilizationDescription(0)
			cityString += "&" + TextUtil.convertToStr(capital.getName())
			cityString = cityString.split('&',1)[-1]
		except:
			pass
	
	return cityString

def getNewNameSpecial(pPlayer, currentName, adjective):
	"""Some special cases for civ naming."""
	if SDTK.sdObjectExists("Revolution", pPlayer):
		SDTK.sdObjectGetVal("Revolution", pPlayer, 'RevolutionTurn')

	barbTurn = None
	if SDTK.sdObjectExists("BarbarianCiv", pPlayer):
		barbTurn = SDTK.sdObjectGetVal("BarbarianCiv", pPlayer, 'SpawnTurn')

	if not pPlayer.isAlive():
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_REFUGEES", ()) % adjective
		return newName

	if pPlayer.isRebel():
		return currentName	# Maintain name of rebels from Revolution Mod

	if pPlayer.isMinorCiv() and barbTurn is not None:
		return currentName	# Maintain minor civ name

	if barbTurn is not None and GAME.getGameTurn() - barbTurn < 20 and pPlayer.getNumCities() < 4:
		return currentName	# Maintain name of BarbarianCiv created player
	
	return None

def getNewNameAlliance(pTeam):
	"""Special options for teams and permanent alliances."""
	#if bTeamNaming and pTeam.getNumMembers() > 1: # and pTeam.getPermanentAllianceTradingCount() > 0:
	if pTeam.getNumMembers() > 1: # and pTeam.getPermanentAllianceTradingCount() > 0:
		iLeader = pTeam.getLeaderID()

		if pTeam.getNumMembers() == 2:
			newName = GC.getPlayer(iLeader).getCivilizationAdjective(0) + "-"
			for idx in xrange(GC.getMAX_PC_PLAYERS()):
				if idx != iLeader and GC.getPlayer(idx).getTeam() == pTeam.getID():
					newName += GC.getPlayer(idx).getCivilizationAdjective(0)
					break
			newName += TRNSLTR.getText("TXT_KEY_MOD_DCN_ALLIANCE", ())
			return newName
		else:
			newName = GC.getPlayer(iLeader).getCivilizationAdjective(0)[0:4]
			for idx in xrange(GC.getMAX_PC_PLAYERS()):
				if not idx == iLeader and GC.getPlayer(idx).getTeam() == pTeam.getID():
					newName += GC.getPlayer(idx).getCivilizationAdjective(0)[0:3]
			newName += TRNSLTR.getText("TXT_KEY_MOD_DCN_ALLIANCE", ())
			return newName
	
	return None


def getNewNameAnarchy(pPlayer, iPlayer, adjective):
	"""Anarchy naming."""
	if pPlayer.isAnarchy and pPlayer.getAnarchyTurns() > 1:
		# Don't want the anarchy name to change during multiple turns of anarchy
		if (iPlayer + pPlayer.getNumCities()) % 2 == 1:
			newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_PROVISIONAL_GOV", ()) % (adjective)
		else:
			newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_PROVISIONAL_AUTH", ()) % (adjective)
		return newName
	
	return None


def isSocialist(pPlayer, eSocietyCivic, eGovernmentCivic):
	"""Check if the civilisation is socialist (People's Republic) or not."""
	if pPlayer.getCurrentEra() >= GC.getInfoTypeForString("C2C_ERA_INDUSTRIAL"):
		return False
	
	return (
		GC.getInfoTypeForString("CIVIC_MARXIST") == eSocietyCivic and
		(
			GC.getInfoTypeForString("CIVIC_TOTALITARIANISM") == eGovernmentCivic or
			GC.getInfoTypeForString("CIVIC_DEMOCRACY") == eGovernmentCivic or
			GC.getInfoTypeForString("CIVIC_REPUBLIC") == eGovernmentCivic
		)
	)


def getPeasantSuffix(pPlayer, eSocietyCivic, eGovernmentCivic):
	"""Get a '_PEASANT' suffix for the XML tag if appropriate."""
	suffix = "_PEASANT"
	if (
		GC.getInfoTypeForString("CIVIC_FEUDAL") == eSocietyCivic and
		GC.getInfoTypeForString("CIVIC_DEMOCRACY") == eGovernmentCivic
	):
		return suffix
	
	if (
		GC.getInfoTypeForString("CIVIC_PROLETARIAT") == eSocietyCivic and
		pPlayer.getCurrentEra() < GC.getInfoTypeForString("C2C_ERA_INDUSTRIAL")
	):
		return suffix
	
	return ""


def getNewNameGeneric(pPlayer, shortName, adjective, eGovernmentCivic, ePowerCivic, eSocietyCivic):
	"""The most low-priority civ names."""
	# Socialist civs.
	if isSocialist(pPlayer, eSocietyCivic, eGovernmentCivic):
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_PEOPLES_REPUBLIC", ()) % shortName
		return newName
	
	peasantSuffix = getPeasantSuffix(pPlayer, eSocietyCivic, eGovernmentCivic)

	if GC.getInfoTypeForString("CIVIC_UNIVERSAL_EMPIRE") == eGovernmentCivic:
		# TODO: A better name.
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_UNIVERSAL_EMPIRE", ()) % shortName
		return newName
	
	if GC.getInfoTypeForString("CIVIC_GALACTIC_FEDERATION") == eGovernmentCivic:
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_GALACTIC_FEDERATION", ()) % shortName
		return newName
	
	if GC.getInfoTypeForString("CIVIC_GERONTOCRACY") == eGovernmentCivic:
		# TODO: A better name.
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_GERONTOCRACY", ()) % shortName
		return newName
	
	if GC.getInfoTypeForString("CIVIC_GESTALT_MIND") == eGovernmentCivic:
		# TODO: A better name.
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_HIVEMIND", ()) % adjective
		return newName
	
	if GC.getInfoTypeForString("CIVIC_TECHNOCRACY") == eGovernmentCivic:
		# TODO: A better name.
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_TECHNOCRACY", ()) % shortName
		return newName
	
	if GC.getInfoTypeForString("CIVIC_TOTALITARIANISM") == eGovernmentCivic:
		# TODO: A better name.
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_AUTOCRACY", ()) % shortName
		return newName

	if GC.getInfoTypeForString("CIVIC_DEMOCRACY") == eGovernmentCivic:
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_REPUBLIC" + peasantSuffix, ()) % shortName
		return newName

	if GC.getInfoTypeForString("CIVIC_THEOCRACY") == eGovernmentCivic:
		# TODO: A better name.
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_THEOCRACY" + peasantSuffix, ()) % shortName
		return newName

	if GC.getInfoTypeForString("CIVIC_REPUBLIC") == eGovernmentCivic:
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_REPUBLIC" + peasantSuffix, ()) % shortName
		return newName

	if GC.getInfoTypeForString("CIVIC_MONARCHY") == eGovernmentCivic:
		newNameKingdom = TRNSLTR.getText("TXT_KEY_MOD_DCN_KINGDOM" + peasantSuffix, ()) % shortName
		newNameQueendom = TRNSLTR.getText("TXT_KEY_MOD_DCN_QUEENDOM" + peasantSuffix, ()) % shortName

		if GC.getInfoTypeForString("CIVIC_PATRIARCHY") == ePowerCivic:
			return newNameKingdom

		if GC.getInfoTypeForString("CIVIC_MATRIARCHY") == ePowerCivic:
			return newNameQueendom

		if pPlayer.getLeaderType() in femaleLeaders:
			return newNameQueendom
		
		return newNameKingdom

	if GC.getInfoTypeForString("CIVIC_DESPOTISM") == eGovernmentCivic:
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_DESPOTATE" + peasantSuffix, ()) % shortName
		return newName

	if GC.getInfoTypeForString("CIVIC_CHIEFDOM") == eGovernmentCivic:
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_CHIEFDOM", ()) % adjective
		return newName

	if GC.getInfoTypeForString("CIVIC_TRIBAL") == eSocietyCivic:
		newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_TRIBE", ()) % adjective
		return newName

	if GC.getInfoTypeForString("CIVIC_PRIMITIVE") == eSocietyCivic:
		if pPlayer.getTotalPopulation() > 1:
			newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_BAND", ()) % adjective
		else:
			newName = TRNSLTR.getText("TXT_KEY_MOD_DCN_FAMILY", ()) % adjective

		return newName
	
	return None


def resetName(iPlayer):
	pPlayer = GC.getPlayer(iPlayer)
	civInfo = GC.getCivilizationInfo(pPlayer.getCivilizationType())
	origAdj = civInfo.getAdjective(0)
	origDesc = civInfo.getDescription()
	origShort = civInfo.getShortDescription(0)

	pPlayer.setCivName(origDesc, origShort, origAdj)


def debugMsg(msg):
	# Just something for me to keep track of things.
	CyInterface().addImmediateMessage(msg, "")